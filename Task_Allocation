Assignment 3

An option to login to the system for three type of users including admin,
manager, engineer. They will be directed to different web pages regarding to their user
type. (Peter)

Once the admin login successfully, the system should display a menu which
will allow admin to manipulate the data regarding to users and cars.
They will be able to:
- View car rental history (Peter, Tim)
- Search and view (Peter, Tim)
- Add, remove and update (Peter)
- Report cars with issue (Peter, Tim)
- logout (Peter)

 Develop and implement a robust input validation scheme. (Tim)

Design database and populate some data based on the requirements. (Joel & Peter)

Create your own RESTful API to communicate with the cloud database (Peter)

Design and demonstrate three different types of visualisation graph that matters
to decision making in dashboard page (Joel)

Send an email to engineer’s email address using Pushbullet API when a vehicle
with issue is reported by admin (Peter & Taylor)

Once the car is reported, the location of the car needs to show in Google Map of
engineer’s page, which will guide engineer to find the car. (Tim & Taylor)

Implement an automatic identification system by using Bluetooth in AP, which
will help engineer to finish their work easily (Taylor)

Add the voice/search feature to search the cars in MP. This is for the admin who
is looking to find a specific car. You must use the Google’s Assistant SDK to complete this
part. (Taylor)

Implement an object-detection console-based system in AP. The system can
retrieve engineer’s profile by detecting QR code carried around. (Taylor)

Unit Testing (Tim, Peter, Joel, Taylor)

Complete documentation using Sphinx. (Joel)

Professional use of
• GitHub from day 1 of the development (Tim, Peter, Joel, Taylor)
• Trello board for the development cycle (Tim, Peter, Joel, Taylor)



Assignment 2

An option to register a new user on MP. The username, password and other
necessary details (first name, last name and email) must be stored on cloud database. (Peter)

The password must be stored in an encrypted (you may hash and salt) format. (Tim)

An option to login into the system and gain access to the application on MP. (Peter)

Develop and implement a robust input validation scheme. (Peter, Tim)

Design database based on the requirements. (Joel, Peter)

Create your own RESTful API to talk to the cloud database. (Peter)

Once MP receives the login information, the system should display a menu
which will allow the user to access the booking system:
- view the history of my booked cars (Joel, Peter)
- show all the available cars (Peter)
- search a car (Peter)
- book a car (Peter)
- cancel a booking (Peter)
- logout (Peter)

Complete documentation using Sphinx (Peter, Joel)

 Professional use of
• GitHub from day 1 of the development
• Trello board for the development cycle (Peter, Tim, Taylor, Joel)

Implement Console-based system on AP, providing the functionality for user to
unlock and return the car. (Taylor)

 Sending user’s credential from AP to MP via sockets. The message needs to
include some important information, such as current date and time, username/password, car
ID. (Taylor)

 MP needs to check the credential from AP and also send back the response
message via sockets. If the credential is correct, MP need to modify related information
about the car in cloud database. (Taylor)

Show all the car’s location by using Google Map API on MP. You can use
dummy location data. (Tim)

Complete documentation using Sphinx, Trello board and Git Hub for this part (Taylor, Tim)

Implement the facial recognition requirement of the system using OpenCV.
This applies to the customers who want to use facial recognition authentication instead of
console-based authentication to unlock the car. (Taylor)

Complete documentation using Sphinx, Trello board and Git Hub for this part. (Taylor, Joel)

 Complete unit test suite for the whole project (i.e., A, B, C and D parts). This
is where you can decide what kind of unit tests are required. (Peter, Tim)
